#!/usr/bin/env python

# first cell
from dotenv import load_dotenv
import os
import sys
import re

#load_dotenv()
OCTOAI_API_TOKEN = os.environ["OCTOAI_API_TOKEN"]
OPENAI_API_KEY = os.environ["OPENAI_API_KEY"]

# second cell
from langchain_text_splitters import RecursiveCharacterTextSplitter, HTMLHeaderTextSplitter

# url = "https://en.wikipedia.org/wiki/Star_Wars"
# url = "https://www.dndbeyond.com/sources/basic-rules"
def load(url):
    headers_to_split_on = [
        ("h1", "Header 1"),
        ("h2", "Header 2"),
        ("h3", "Header 3"),
        ("h4", "Header 4"),
        ("div", "Divider")
    ]

    html_splitter = HTMLHeaderTextSplitter(headers_to_split_on=headers_to_split_on)

    # for local file use html_splitter.split_text_from_file(<path_to_file>)
    html_header_splits = html_splitter.split_text_from_url(url)

    chunk_size = 1024
    chunk_overlap = 128
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=chunk_size,
        chunk_overlap=chunk_overlap,
    )

    # Split
    splits = text_splitter.split_documents(html_header_splits)
    return splits

all_splits = []

def slurp_and_process_files(directory):
    global all_splits
    import glob
    for filepath in glob.glob(os.path.join(directory, '*')):
        if os.path.isfile(filepath):
            match = re.match(r'spells', filepath)
            if match:
                break

            print(f"http://localhost:8000/{filepath}")
            all_splits += load(f"http://localhost:8000/{filepath}")

slurp_and_process_files('./data/basic-rules/www.dndbeyond.com/sources')
slurp_and_process_files('./data/basic-rules/www.dndbeyond.com/compendium/rules/basic-rules')

def load_add(url):
    global all_splits
    all_splits += load(url)

def get_retriever():
    from langchain.vectorstores import FAISS

    from langchain_community.embeddings import OctoAIEmbeddings
    embeddings = OctoAIEmbeddings(endpoint_url="https://text.octoai.run/v1/")

    vector_store = FAISS.from_documents(
        all_splits,
        embedding=embeddings
    )

    return vector_store.as_retriever()

# eighth cell
def do_short(input):
    from langchain.prompts import ChatPromptTemplate
    from langchain_core.runnables import RunnablePassthrough
    from langchain_core.output_parsers import StrOutputParser

    template="""You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question. If you don't know the answer, just say that you don't know. Use three sentences maximum and keep the answer concise.
    Question: {question}
    Context: {context}
    Answer:"""
    prompt = ChatPromptTemplate.from_template(template)

    from langchain_community.llms.octoai_endpoint import OctoAIEndpoint
    llm = OctoAIEndpoint(
            model="llama-2-13b-chat-fp16",
            max_tokens=1024,
            presence_penalty=0,
            temperature=0.1,
            top_p=0.9,
        )

    chain = (
        {"context": get_retriever(), "question": RunnablePassthrough()}
        | prompt
        | llm
        | StrOutputParser()
    )

    chain.invoke(input)

def do_strict(input):
    from langchain.prompts import ChatPromptTemplate
    from pprint import pprint
    from langchain_core.runnables import RunnablePassthrough
    from langchain_core.output_parsers import StrOutputParser

    template="""You are given some context and asked to answer questions based on only that context.
Question: {question}
Context: {context}
Answer:"""
    lit_crit_prompt = ChatPromptTemplate.from_template(template)

    from langchain_community.llms.octoai_endpoint import OctoAIEndpoint
    llm = OctoAIEndpoint(
            model="llama-2-13b-chat-fp16",
            max_tokens=1024,
            presence_penalty=0,
            temperature=0.1,
            top_p=0.9,
        )

    lcchain = (
        {"context": get_retriever(), "question": RunnablePassthrough()}
        | lit_crit_prompt
        | llm
        | StrOutputParser()
    )

    answer = lcchain.invoke(input)
    show(answer)
    # pprint(lcchain.invoke(input))

def show(text):
    # Split the text into sentences using regular expressions
    sentences = re.split(r'(?<=[.!?]) +', text)

    # Print each sentence on a separate line with a blank line in between
    for sentence in sentences:
        print(sentence.strip())
        print()  # Print a blank line

while True:
    try:
        got = input("input> ").strip()  # Print a prompt and read input
        if not got:  # Exit loop if input is empty
            break

        match = re.match(r'load\((.*)\)', got)
        if match:
            load_add(match.group(1))
        else:
            do_strict(got)

    except EOFError:  # Handle end of input (Ctrl+D)
        break
